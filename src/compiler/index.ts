import { fstat, readFileSync, statSync, writeFileSync } from "fs";
import { glob } from "glob";
import { resolve } from "path";
import logger from "../util/logger";
const parse = require("@architect/parser");

interface CompilerOptions {
    input: string;
    output: string;
}

export default class Complier {
    private input: string;
    private output: string;
    private bigFile: any = {}; // the main app.arc we will be writing
    constructor(options: CompilerOptions) {
        this.input = options.input;
        this.output = options.output;
    }

    public run() {
        glob(this.input, (error, matches) => {
            if(error) {
                logger.error(error);
                process.exit(1);
            } else {
                for(const match of matches) {
                    const isDirectory = this.isDirectory(match);
                    // is not a directory. now checking if file is .arc
                    // TODO: add support for other file types. JSON, YAML etc
                    if(!isDirectory) {
                        const isArcFile = match.split('.').pop() === "arc";
                        if(isArcFile) {
                            const arcFileContents = readFileSync(resolve(match)).toString();
                            if(arcFileContents.length > 0) {
                                const parsedArcFile = parse(arcFileContents);
                                for(const key of Object.keys(parsedArcFile)) {
                                    if(!this.bigFile[key]) {
                                        this.bigFile[key] = [];
                                    }
                                    for(const item of parsedArcFile[key]) {
                                        this.bigFile[key].push(item);
                                    }
                                }
                            }
                        }
                    }
                }
                this.writeBigFile(); //write the one file
            }
        })
    }

    private writeBigFile() {
        logger.info(`writing ${resolve(this.output)}`)
        let stringToWrite = "# GENERATED BY arc-config-compiler\n\n";
        for(const key of Object.keys(this.bigFile)) {
            stringToWrite += `@${key}\n`;
            for(const item of this.bigFile[key]) {
                const name = Object.keys(item)[0];
                stringToWrite += `\n${ name }\n`
                for(const k of Object.keys(item[name])) {
                    stringToWrite += `  ${k} ${ item[name][k] }\n`
                }
            }
        }
        writeFileSync(resolve(this.output), stringToWrite)
        logger.info(`finished writing ${resolve(this.output)}`)
    }

    private isDirectory(dir: string) {
        const _stat = statSync(dir);
        return _stat.isDirectory();
    }
}